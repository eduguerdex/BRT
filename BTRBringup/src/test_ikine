#!/usr/bin/env python

import rospy
from sensor_msgs.msg import JointState
from markers import *
from ManoDEV import *


rospy.init_node("testInvKine")
pub = rospy.Publisher('joint_states', JointState, queue_size=1000)

bmarker      = BallMarker(color['RED'])
bmarker_des  = BallMarker(color['GREEN'])

# Joint names
jnames = ['base-0_joint', '0-1_joint', '1-2_joint','2-4_joint', '4-5_joint', '5-6_joint']

# Desired position
xd = np.array([2.306, -0.202, -0.84])
# Initial configuration
q0 = np.array([0.1,0, 0, -0.5, -1.0, 0.0])
# Inverse kinematics

q = ikine_ur5(xd, q0)

# Resulting position (end effector with respect to the base link)
T = fkine_ur5(q)
print("Posicion deseada")
print(xd)

print("Posicion y orientacion del efector final")
print(np.round(T,3))
# Red marker shows the achieved position
bmarker.xyz(T[0:3,3])
# Green marker shows the desired position
bmarker_des.xyz(xd)

# Objeto (mensaje) de tipo JointState
jstate = JointState()
# Asignar valores al mensaje
jstate.header.stamp = rospy.Time.now()
jstate.name = jnames
# Add the head joint value (with value 0) to the joints
jstate.position = q

print("Configuracion articular")
print(np.round(q,2))
# Loop rate (in Hz)
rate = rospy.Rate(100)
# Continuous execution loop
while not rospy.is_shutdown():
    # Current time (needed for ROS)
    jstate.header.stamp = rospy.Time.now()
    # Publish the message
    pub.publish(jstate)
    bmarker.publish()
    bmarker_des.publish()
    # Wait for the next iteration
    rate.sleep()