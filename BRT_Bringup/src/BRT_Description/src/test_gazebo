#!/usr/bin/env python
import time
import roslib; roslib.load_manifest('ur_driver')
import rospy
import actionlib
from std_msgs.msg import String
from control_msgs.msg import *
from trajectory_msgs.msg import *

global press_key
press_key = "0"

def callback(msg):
    global press_key
    press_key = msg.data

def Limites(q)
	val = True
	if -6.28 < Q[0] or Q[0] >=6.28
		val = False
	if -6.28 < Q[1] or Q[1] >=6.28
		val = False
	if -3.14 < Q[2] or Q[2] >=3.14
		val = False
	if -6.28 < Q[3] or Q[3] >=6.28
		val = False
	if -6.28 < Q[4] or Q[4] >=6.28
		val = False
	if -6.28 < Q[5] or Q[5] >=6.28
		val = False

if __name__ == '__main__':
    rospy.Subscriber("/keys", String, callback)
    rospy.init_node("test1", disable_signals=True)
    robot_client = actionlib.SimpleActionClient('follow_joint_trajectory', FollowJointTrajectoryAction)

    print "Waiting for server..."
    robot_client.wait_for_server()
    print "Connected to server"

    joint_names = ['shoulder_pan_joint', 'shoulder_lift_joint', 'elbow_joint', 'wrist_1_joint', 'wrist_2_joint', 'wrist_3_joint']
    Q0 = [0.0, -1.0, 1.7, -2.2, -1.6, 0.0]

    g = FollowJointTrajectoryGoal()
    g.trajectory = JointTrajectory()
    g.trajectory.joint_names = joint_names

    # Initial position
    g.trajectory.points = [ JointTrajectoryPoint(positions=Q0, velocities=[0]*6,time_from_start=rospy.Duration(2.0))]
    robot_client.send_goal(g)
    robot_client.wait_for_result()
    rospy.sleep(1)
    
    z = [6.28, -6.28, 3.14, -3.14]

    rate = rospy.Rate(10)
    while not rospy.is_shutdown():
        robot_client.cancel_goal()
        rospy.Suscriber(“/keys”,String,callback)        

        if press_key=="q":
            if Q0[0]<= z[0]:
                Q0[0] = Q0[0]+0.005

        if press_key=="a":
            if Q0[0]>= z[1]:
               Q0[0] = Q0[0]-0.05

        if press_key=="w":
            if Q0[1]<= z[0]:
                Q0[1] = Q0[1]+0.05
    
        if press_key=="s":
            if Q0[1]>= z[1]:
                Q0[1] = Q0[1]-0.05

        if press_key=="e":
            if Q0[2]<= z[2]:
                Q0[2] = Q0[2]+0.05
        
        if press_key=="d":
            if Q0[2]>= z[3]:
                Q0[2] = Q0[2]-0.05

        if press_key=="r":
            if Q0[3]<= z[0]:
                Q0[3] = Q0[3]+0.05

        if press_key=="f":
            if Q0[3]>= z[1]:
                Q0[3] = Q0[3]-0.05

        if press_key=="t":
            if Q0[4]<= z[0]:
                Q0[4] = Q0[4]+0.05

        if press_key=="g":
            if Q0[5]>= z[1]:
                Q0[4] = Q0[4]-0.05

        if press_key=="y":
            if Q0[5]<= z[0]:
                Q0[5] = Q0[5]+0.05
       
        if press_key=="h":
            if Q0[5]>= z[1]:
                Q0[5] = Q0[5]-0.05


        g.trajectory.points = [ JointTrajectoryPoint(positions=Q0, velocities=[0]*6, time_from_start=rospy.Duration(0.01))]
        robot_client.send_goal(g)
        robot_client.wait_for_result()

        rate.sleep()

    robot_client.cancel_goal()

    
    rospy.init_node("test1", disable_signals=True)

    robot_client = actionlib.SimpleActionClient('follow_joint_trajectory', FollowJointTrajectoryAction)

    print "Waiting for server..."
    robot_client.wait_for_server()
    print "Connected to server"

    joint_names = ['shoulder_pan_joint', 'shoulder_lift_joint', 'elbow_joint', 'wrist_1_joint', 'wrist_2_joint', 'wrist_3_joint']
    Q0 = [0.0, -1.0, 1.7, -2.2, -1.6, 0.0]

    g = FollowJointTrajectoryGoal()
    g.trajectory = JointTrajectory()
    g.trajectory.joint_names = joint_names

    # Initial position
    g.trajectory.points = [ JointTrajectoryPoint(positions=Q0, velocities=[0]*6,time_from_start=rospy.Duration(2.0))]
    robot_client.send_goal(g)
    robot_client.wait_for_result()
    rospy.sleep(1)
    
    rate = rospy.Rate(100)
    while not rospy.is_shutdown():
        robot_client.cancel_goal()

        # Modification of the motion
        Q0[0] = Q0[0]-0.005

        g.trajectory.points = [ JointTrajectoryPoint(positions=Q0, velocities=[0]*6, time_from_start=rospy.Duration(0.008))]
        robot_client.send_goal(g)
        robot_client.wait_for_result()

        rate.sleep()

    robot_client.cancel_goal()